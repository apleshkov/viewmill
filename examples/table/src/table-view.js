// DO NOT EDIT! This file is generated by vewmill.
// See https://github.com/apleshkov/viewmill for the details.
/* eslint-disable */
import * as viewmill from "viewmill-runtime";
export default function(cols = [], state, page = 1, sorting) {
    return viewmill.view({
        cols: viewmill.param(cols),
        state: viewmill.param(state),
        page: viewmill.param(page),
        sorting: viewmill.param(sorting)
    }, ({
        cols,
        state,
        page,
        sorting
    }, unmountSignal)=>{
        const loading = viewmill.live(()=>(state.getValue().type === "loading"), [
            state
        ]);
        const [results, limit, total] = viewmill.live(()=>((state.getValue().data ?? {})), [
            state
        ], [
            3,
            ({ results = [], info: { limit = 10, total = 10 } = {} })=>([
                    results,
                    limit,
                    total
                ])
        ]);
        const placeholder = viewmill.live(()=>(Array.from({
                length: limit.getValue()
            }).map(()=>(viewmill.el("<tr><!></tr>", (container)=>{
                    const tr__1 = container.firstChild;
                    const anchor__1 = tr__1.firstChild;
                    viewmill.insert(viewmill.expr(()=>(Array.from({
                            length: cols.getValue().length
                        }).map(()=>(viewmill.el('<td class="placeholder-glow"><span class="placeholder w-100"></span></td>')))), [
                        cols
                    ]), tr__1, anchor__1);
                })))), [
            limit
        ]);
        return (viewmill.el('<div class="position-relative"><div><!></div><table class="table"><thead><tr><!></tr></thead><tbody><!><!></tbody></table><div data-pagination class="d-flex justify-content-center"><!></div></div>', (container)=>{
            const div__1 = container.firstChild;
            const div__2 = div__1.firstChild;
            viewmill.attr(div__2, "class", ()=>(`alert alert-danger mb-3 ${state.getValue().type === "error" ? "" : "d-none"}`), [
                state
            ]);
            const anchor__1 = div__2.firstChild;
            viewmill.insert(viewmill.expr(()=>(state.getValue().error), [
                state
            ]), div__2, anchor__1);
            const table__1 = div__2.nextSibling;
            const thead__1 = table__1.firstChild;
            const tr__1 = thead__1.firstChild;
            const anchor__2 = tr__1.firstChild;
            viewmill.insert(viewmill.list(()=>(cols.getValue().map(({ key, title, sortable })=>{
                    return viewmill.el("<th><!></th>", (container1)=>{
                        const th__1 = container1.firstChild;
                        const anchor__2 = th__1.firstChild;
                        viewmill.insert(sortable ? viewmill.el('<a href="#"><!><!></a>', (container2)=>{
                            const a__1 = container2.firstChild;
                            viewmill.attr(a__1, "data-col", key);
                            const anchor__2 = a__1.firstChild;
                            viewmill.insert(title, a__1, anchor__2);
                            const anchor__3 = anchor__2.nextSibling;
                            viewmill.insert(viewmill.cond(()=>(sorting.getValue() && sorting.getValue().field === key), ()=>((sorting.getValue().order === "asc" ? " ↑" : " ↓")), ()=>(null), [
                                sorting
                            ]), a__1, anchor__3);
                        }) : title, th__1, anchor__2);
                    });
                })), [
                cols
            ]), tr__1, anchor__2);
            const tbody__1 = thead__1.nextSibling;
            const anchor__3 = tbody__1.firstChild;
            viewmill.insert(viewmill.cond(()=>(loading.getValue()), ()=>(placeholder.getValue()), ()=>(null), [
                loading,
                placeholder
            ]), tbody__1, anchor__3);
            const anchor__4 = anchor__3.nextSibling;
            viewmill.insert(viewmill.list(()=>(results.getValue().map((record)=>(viewmill.el("<tr><!></tr>", (container1)=>{
                        const tr__2 = container1.firstChild;
                        const anchor__4 = tr__2.firstChild;
                        viewmill.insert(viewmill.list(()=>(cols.getValue().map(({ key, render })=>(viewmill.el("<td><!></td>", (container2)=>{
                                    const td__1 = container2.firstChild;
                                    const anchor__4 = td__1.firstChild;
                                    viewmill.insert(render ? render(record) : record[key], td__1, anchor__4);
                                })))), [
                            cols
                        ]), tr__2, anchor__4);
                    })))), [
                results
            ]), tbody__1, anchor__4);
            const div__3 = table__1.nextSibling;
            const anchor__5 = div__3.firstChild;
            viewmill.insert(viewmill.cond(()=>(total.getValue() > 0 && limit.getValue() > 0 && total.getValue() > limit.getValue()), ()=>((viewmill.el('<div><ul class="pagination"><!></ul></div>', (container1)=>{
                    const div__4 = container1.firstChild;
                    const ul__1 = div__4.firstChild;
                    const anchor__5 = ul__1.firstChild;
                    viewmill.insert(viewmill.list(()=>(Array.from({
                            length: Math.ceil(total.getValue() / limit.getValue())
                        }, (_, i)=>i + 1).map((p)=>{
                            return (viewmill.el('<li><a href="#" class="page-link"><!></a></li>', (container2)=>{
                                const li__1 = container2.firstChild;
                                viewmill.attr(li__1, "class", ()=>(`page-item ${p === page.getValue() ? "disabled" : ""}`), [
                                    page
                                ]);
                                const a__1 = li__1.firstChild;
                                viewmill.attr(a__1, "data-page", p);
                                const anchor__5 = a__1.firstChild;
                                viewmill.insert(p, a__1, anchor__5);
                            }));
                        })), [
                        total,
                        limit
                    ]), ul__1, anchor__5);
                }))), ()=>(null), [
                total,
                limit
            ]), div__3, anchor__5);
        }));
    });
};
