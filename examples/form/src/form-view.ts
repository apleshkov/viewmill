// DO NOT EDIT! This file is generated by vewmill.
// See https://github.com/apleshkov/viewmill for the details.
/* eslint-disable */
// @ts-nocheck
import * as viewmill from "viewmill-runtime";
import { Result, ResultItem } from "./validation";
export default function(shouldConfirmPassword = true, validationResult?: Result, loadingState?: {
    loading?: boolean;
    success?: string;
    error?: string;
}) {
    return viewmill.view({
        shouldConfirmPassword: viewmill.param(shouldConfirmPassword),
        validationResult: viewmill.param(validationResult),
        loadingState: viewmill.param(loadingState)
    }, ({
        shouldConfirmPassword,
        validationResult,
        loadingState
    }, unmountSignal)=>{
        const items = viewmill.live(()=>(validationResult.getValue()?.items), [
            validationResult
        ], null, unmountSignal);
        return [
            viewmill.cond(()=>(loadingState.getValue()?.success), ()=>(viewmill.el('<div class="alert alert-success"><!></div>', (container, unmountSignal1)=>{
                    const div__1 = container.firstChild;
                    const anchor__1 = div__1.firstChild;
                    viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(loadingState.getValue()?.success), [
                        loadingState
                    ]), div__1, anchor__1));
                })), ()=>(null), [
                loadingState
            ]),
            viewmill.cond(()=>(loadingState.getValue()?.error), ()=>(viewmill.el('<div class="alert alert-danger"><!></div>', (container, unmountSignal1)=>{
                    const div__1 = container.firstChild;
                    const anchor__1 = div__1.firstChild;
                    viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(loadingState.getValue()?.error), [
                        loadingState
                    ]), div__1, anchor__1));
                })), ()=>(null), [
                loadingState
            ]),
            viewmill.el('<form><fieldset><div class="row gt-3 mb-3"><div class="col"><label for="firstName" class="form-label">First Name</label><input id="firstName" type="text" autocomplete="off"/><div class="invalid-feedback"><!></div></div><div class="col"><label for="lastName" class="form-label">Last Name</label><input id="lastName" type="text" autocomplete="off"/><div class="invalid-feedback"><!></div></div></div><div class="form-check mb-3"><input id="shouldConfirmPassword" type="checkbox"/><label class="form-check-label" for="shouldConfirmPassword">Check to enable the password confirmation</label><div class="invalid-feedback"><!></div></div><div class="row gt-3 mb-3"><div class="col"><label for="password" class="form-label">Password</label><input id="password" type="password"/><div class="invalid-feedback"><!></div></div><div><label for="confirmedPassword" class="form-label">Confirm Password</label><input id="confirmedPassword" type="password"/><div class="invalid-feedback"><!></div></div></div><div class="form-check mb-3"><input id="producesError" type="checkbox"/><label class="form-check-label" for="producesError">Check to produce an error on submit</label><div class="invalid-feedback"><!></div></div><div class="mb-3"><label for="description" class="form-label">Description</label><input id="description" type="text" autocomplete="off"/><div class="form-text">Optional description</div><div class="invalid-feedback"><!></div></div><div class="form-check mb-3"><input id="agree" type="checkbox"/><label class="form-check-label" for="agree">Agree to submit</label><div class="invalid-feedback"><!></div></div><div class="mt-4"><button type="submit" class="btn btn-primary">Submit</button></div></fieldset></form>', (container, unmountSignal1)=>{
                const form__1 = container.firstChild;
                const fieldset__1 = form__1.firstChild;
                viewmill.attr(fieldset__1, "disabled", ()=>(!!loadingState.getValue()?.loading), [
                    loadingState
                ], unmountSignal1);
                const div__1 = fieldset__1.firstChild;
                const div__2 = div__1.firstChild;
                const label__1 = div__2.firstChild;
                const input__1 = label__1.nextSibling;
                viewmill.attr(input__1, "class", ()=>(`form-control ${cls(items.getValue()?.firstName)}`), [
                    items
                ], unmountSignal1);
                const div__3 = input__1.nextSibling;
                const anchor__1 = div__3.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.firstName)), [
                    items
                ]), div__3, anchor__1));
                const div__4 = div__2.nextSibling;
                const label__2 = div__4.firstChild;
                const input__2 = label__2.nextSibling;
                viewmill.attr(input__2, "class", ()=>(`form-control ${cls(items.getValue()?.lastName)}`), [
                    items
                ], unmountSignal1);
                const div__5 = input__2.nextSibling;
                const anchor__2 = div__5.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.lastName)), [
                    items
                ]), div__5, anchor__2));
                const div__6 = div__1.nextSibling;
                const input__3 = div__6.firstChild;
                viewmill.attr(input__3, "checked", ()=>(shouldConfirmPassword.getValue()), [
                    shouldConfirmPassword
                ], unmountSignal1);
                viewmill.attr(input__3, "class", ()=>(`form-check-input ${cls(items.getValue()?.shouldConfirmPassword)}`), [
                    items
                ], unmountSignal1);
                const label__3 = input__3.nextSibling;
                const div__7 = label__3.nextSibling;
                const anchor__3 = div__7.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.shouldConfirmPassword)), [
                    items
                ]), div__7, anchor__3));
                const div__8 = div__6.nextSibling;
                const div__9 = div__8.firstChild;
                const label__4 = div__9.firstChild;
                const input__4 = label__4.nextSibling;
                viewmill.attr(input__4, "class", ()=>(`form-control ${cls(items.getValue()?.password)}`), [
                    items
                ], unmountSignal1);
                const div__10 = input__4.nextSibling;
                const anchor__4 = div__10.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.password)), [
                    items
                ]), div__10, anchor__4));
                const div__11 = div__9.nextSibling;
                viewmill.attr(div__11, "class", ()=>(`col ${shouldConfirmPassword.getValue() ? "" : "d-none"}`), [
                    shouldConfirmPassword
                ], unmountSignal1);
                const label__5 = div__11.firstChild;
                const input__5 = label__5.nextSibling;
                viewmill.attr(input__5, "class", ()=>(`form-control ${cls(items.getValue()?.confirmedPassword)}`), [
                    items
                ], unmountSignal1);
                const div__12 = input__5.nextSibling;
                const anchor__5 = div__12.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.confirmedPassword)), [
                    items
                ]), div__12, anchor__5));
                const div__13 = div__8.nextSibling;
                const input__6 = div__13.firstChild;
                viewmill.attr(input__6, "class", ()=>(`form-check-input ${cls(items.getValue()?.producesError)}`), [
                    items
                ], unmountSignal1);
                const label__6 = input__6.nextSibling;
                const div__14 = label__6.nextSibling;
                const anchor__6 = div__14.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.producesError)), [
                    items
                ]), div__14, anchor__6));
                const div__15 = div__13.nextSibling;
                const label__7 = div__15.firstChild;
                const input__7 = label__7.nextSibling;
                viewmill.attr(input__7, "class", ()=>(`form-control ${cls(items.getValue()?.description)}`), [
                    items
                ], unmountSignal1);
                const div__16 = input__7.nextSibling;
                const div__17 = div__16.nextSibling;
                const anchor__7 = div__17.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.description)), [
                    items
                ]), div__17, anchor__7));
                const div__18 = div__15.nextSibling;
                const input__8 = div__18.firstChild;
                viewmill.attr(input__8, "class", ()=>(`form-check-input ${cls(items.getValue()?.agree)}`), [
                    items
                ], unmountSignal1);
                const label__8 = input__8.nextSibling;
                const div__19 = label__8.nextSibling;
                const anchor__8 = div__19.firstChild;
                viewmill.unmountOn(unmountSignal1, viewmill.insert(viewmill.expr(()=>(err(items.getValue()?.agree)), [
                    items
                ]), div__19, anchor__8));
                const div__20 = div__18.nextSibling;
                const button__1 = div__20.firstChild;
            })
        ];
    });
};
function cls(item: ResultItem | undefined): string {
    return typeof item?.valid === "undefined" ? "" : (item.valid === true ? "is-valid" : "is-invalid");
}
function err(item: ResultItem | undefined): string | undefined {
    if (item?.valid === false) {
        return item.message;
    }
}
